#!/usr/bin/env node

var path = require('path'),
    fs = require('fs'),
    _ = require('lodash'),
    AssetGraph = require('../lib/AssetGraph'),
    i18nTools = require('../lib/i18nTools'),
    urlTools = require('urltools'),
    mkpathSync = require('../lib/mkpathSync'),
    pluralsCldr = require('plurals-cldr'),
    commandLineOptions = require('optimist')
        .usage('$0 [--label <labelName>=<dir> ...] [--parentdir] [--i18n <pathToI18nFile>] [--all] [--defaultlocale <localeId>] --babeldir=<dirForBabelFiles> --root <inputRootDirectory> --locales <localeId>,... <htmlFile>...')
        .boolean('parentdir', 'all')
        .demand(['root', 'locales', 'babeldir'])
        .argv,
    localeIds = commandLineOptions.locales && _.flatten(_.flatten([commandLineOptions.locales]).map(function (localeId) {
        return localeId.split(',');
    })).map(i18nTools.normalizeLocaleId),
    initialAssetUrls = commandLineOptions._.map(urlTools.fsFilePathToFileUrl),
    defaultLocaleId,
    i18nUrl;

if (commandLineOptions.defaultlocale) {
    defaultLocaleId = i18nTools.normalizeLocaleId(commandLineOptions.defaultlocale);
    if (localeIds && localeIds.indexOf(defaultLocaleId) === -1) {
        throw new Error('The default locale id (' + defaultLocaleId + ') is not among the locales listed with the --locales switch (' + localeIds.join(', ') + ')');
    }
} else if (localeIds) {
    defaultLocaleId = localeIds[0];
}

if (commandLineOptions.i18n) {
    i18nUrl = urlTools.fsFilePathToFileUrl(commandLineOptions.i18n);
    initialAssetUrls.push(i18nUrl);
}

mkpathSync(commandLineOptions.babeldir);

function coalescePluralsToLocale(value, localeId, pluralFormsToInclude) {
    return (function traverse(obj) {
        if (Array.isArray(obj)) {
            return obj.map(traverse);
        } else if (typeof obj === 'object' && obj !== null) {
            var coalescedObj = {},
                keys = Object.keys(obj);
            if (keys.length > 0 && keys.every(function (key) {
                return ['zero', 'one', 'two', 'few', 'many', 'other'].indexOf(key) !== -1;
            })) {
                keys = [];
                pluralsCldr.forms(localeId).forEach(function (pluralForm) {
                    if (!pluralFormsToInclude || pluralFormsToInclude === pluralForm || pluralFormsToInclude.indexOf(pluralForm) !== -1) {
                        coalescedObj[pluralForm] = obj[pluralForm];
                        keys.push(pluralForm);
                    }
                });
                obj = coalescedObj;
            }
            keys.forEach(function (propertyName) {
                coalescedObj[propertyName] = traverse(obj[propertyName]);
            });
            return coalescedObj;
        } else {
            return obj;
        }
    }(value));
}

function valueContainsPlurals(obj) {
    if (Array.isArray(obj)) {
        return obj.some(valueContainsPlurals);
    } else if (typeof obj === 'object' && obj !== null) {
        var keys = Object.keys(obj);
        if (keys.length > 0 && keys.every(function (key) {
            return ['zero', 'one', 'two', 'few', 'many', 'other'].indexOf(key) !== -1;
        })) {
            return true;
        } else {
            return keys.some(function (key) {
                return valueContainsPlurals(obj[key]);
            });
        }
    } else {
        return false;
    }
}

function nullIfNullOrUndefined(val) {
    if (val === null || typeof val === 'undefined') {
        return null;
    } else {
        return val;
    }
}

function nullOutLeaves(obj) {
    if (Array.isArray(obj)) {
        return obj.map(nullOutLeaves);
    } else if (typeof obj === 'object' && obj !== null) {
        var resultObj = {};
        Object.keys(obj).forEach(function (propertyName) {
            resultObj[propertyName] = nullOutLeaves(obj[propertyName]);
        });
        return resultObj;
    } else {
        return null;
    }
}

function getLeavesFrom(obj, otherObject) {
    if (Array.isArray(obj)) {
        return obj.map(function (item, i) {
            return getLeavesFrom(item, Array.isArray(otherObject) ? nullIfNullOrUndefined(otherObject[i]) : null);
        });
    } else if (typeof obj === 'object' && obj !== null) {
        var resultObj = {};
        Object.keys(obj).forEach(function (propertyName) {
            resultObj[propertyName] = getLeavesFrom(obj[propertyName], otherObject && typeof otherObject === 'object' ? nullIfNullOrUndefined(otherObject[propertyName]) : null);
        });
        return resultObj;
    } else {
        return obj;
    }
}

function flattenKey(key, value) {
    var valueByFlattenedKey = {},
        path = [];
    (function traverse(obj) {
        if (Array.isArray(obj)) {
            for (var i = 0 ; i < obj.length ; i += 1) {
                path.push(i);
                traverse(obj[i]);
                path.pop();
            }
        } else if (typeof obj === 'object' && obj !== null) {
            Object.keys(obj).forEach(function (propertyName) {
                path.push(propertyName);
                traverse(obj[propertyName]);
                path.pop();
            });
        } else {
            // Assume a type that can be stringified using String(obj):
            valueByFlattenedKey[key + path.map(function (pathComponent) {
                return '[' + pathComponent + ']';
            }).join('')] = obj;
        }
    }(value));
    return valueByFlattenedKey;
}

var pluralFormsInTheDefaultLocale = pluralsCldr.forms(defaultLocaleId),
    relevantPluralFormsNotInTheDefaultLocale = _.difference(_.union.apply(_, localeIds.map(function (localeId) {
        return pluralsCldr.forms(localeId);
    })), pluralFormsInTheDefaultLocale);

new AssetGraph({root: commandLineOptions.root})
    .logEvents({repl: commandLineOptions.repl, stopOnWarning: commandLineOptions.stoponwarning, suppressJavaScriptCommonJsRequireWarnings: true})
    .registerRequireJsConfig({preventPopulationOfJavaScriptAssetsUntilConfigHasBeenFound: true})
    .registerLabelsAsCustomProtocols(commandLineOptions.label, {installFindParentDirectoryAsDefault: commandLineOptions.parentdir})
    .loadAssets(initialAssetUrls)
    .populate({from: {type: 'Html'}, followRelations: {type: 'HtmlScript', to: {url: /^file:/}}})
    .assumeRequireJsConfigHasBeenFound()
    .fixBaseAssetsOfUnresolvedOutgoingRelationsFromHtmlFragments({isInitial: true})
    .assumeThatAllHtmlFragmentAssetsWithoutIncomingRelationsAreNotTemplates()
    .populate({
        followRelations: {type: AssetGraph.query.not(['HtmlAnchor', 'HtmlMetaRefresh']), to: {url: AssetGraph.query.not(/^https?:/)}}
    })
    .checkLanguageKeys({supportedLocaleIds: localeIds, defaultLocaleId: defaultLocaleId})
    .queue(function exportLanguageKeys(assetGraph) {
        var initialHtmlAssets = assetGraph.findAssets({type: 'Html', isInitial: true}),
            occurrencesByKey = i18nTools.findOccurrences(assetGraph, initialHtmlAssets),
            allKeys = i18nTools.extractAllKeys(assetGraph),
            allKeysFlattened = {},
            alreadyTranslatedByFlattenedKey = {},
            i18nAssetForAllKeys;

        if (i18nUrl) {
            i18nAssetForAllKeys = assetGraph.findAssets({url: i18nUrl})[0];
            if (!i18nAssetForAllKeys) {
                i18nAssetForAllKeys = new AssetGraph.I18n({
                    url: i18nUrl,
                    isDirty: true,
                    parseTree: {}
                });
                assetGraph.addAsset(i18nAssetForAllKeys);
                assetGraph.emit('info', '--i18n ' + commandLineOptions.i18n + ' not found, creating it');
            }
        }

        Object.keys(allKeys).forEach(function (key) {
            Object.keys(allKeys[key]).forEach(function (localeId) {
                var valueByFlattenedKey = flattenKey(key, allKeys[key][localeId]);
                Object.keys(valueByFlattenedKey).forEach(function (flattenedKey) {
                    allKeysFlattened[flattenedKey] = allKeysFlattened[flattenedKey] || {};
                    allKeysFlattened[flattenedKey][localeId] = valueByFlattenedKey[flattenedKey];
                });
            });
        });

        // Note which flattened keys have already been translated to all the locales we've been asked to process:
        Object.keys(allKeysFlattened).forEach(function (key) {
            alreadyTranslatedByFlattenedKey[key] = true;
            localeIds.forEach(function (localeId) {
                var prioritizedLocaleIds = i18nTools.expandLocaleIdToPrioritizedList(localeId);
                for (var i = 0 ; i < prioritizedLocaleIds.length ; i += 1) {
                    if (prioritizedLocaleIds[i] in allKeysFlattened[key]) {
                        return;
                    }
                }
                alreadyTranslatedByFlattenedKey[key] = false;
            });
        });

        localeIds.forEach(function (localeId) {
            var babelSrc = '',
                isDefaultLocale = localeId === defaultLocaleId || localeId.indexOf(defaultLocaleId + '_') === 0,
                keys = Object.keys(occurrencesByKey).sort(function (a, b) {
                    var aLowerCase = a.toLowerCase(),
                        bLowerCase = b.toLowerCase();
                    return aLowerCase < bLowerCase ? -1 : (aLowerCase > bLowerCase ? 1 : 0);
                });
            keys.forEach(function (key) {
                var occurrences = occurrencesByKey[key],
                    omitExistingValues = false,
                    value,
                    defaultValue,
                    defaultValueInTheOccurrence,
                    i18nAsset;
                try {
                    i18nAsset = i18nAssetForAllKeys || i18nTools.getOrCreateI18nAssetForKey(assetGraph, key, occurrencesByKey);
                } catch (e) {
                    console.warn('Skipping language key: ' + e.message);
                }

                // Look for a default value in the occurrences:
                occurrences.forEach(function (occurrence) {
                    // FIXME: Warn about multiple different default values?
                    defaultValueInTheOccurrence = occurrence.defaultValue;
                });

                if (key in allKeys && defaultLocaleId in allKeys[key]) {
                    defaultValue = allKeys[key][defaultLocaleId];
                } else {
                    defaultValue = defaultValueInTheOccurrence;
                }

                if (key in allKeys && localeId in allKeys[key]) {
                    value = allKeys[key][localeId];
                } else if (defaultValue && localeId.indexOf(defaultLocaleId) === 0) {
                    value = defaultValue;
                } else if (defaultValue) {
                    value = defaultValue;
                    // Use the defaultValue to figure out which babel keys to flatten it to (only relevant for structured values):
                    omitExistingValues = true;
                } else {
                    value = null;
                }

                var valueByFlattenedKey = flattenKey(key, value),
                    defaultValueInTheOccurrenceByFlattenedKey,
                    flattenedKeysThatMustBePresent = Object.keys(valueByFlattenedKey);
                // Make sure that all the flattened keys from the actual occurrence are present:
                if (typeof defaultValueInTheOccurrence !== 'undefined') {
                    defaultValueInTheOccurrence = coalescePluralsToLocale(defaultValueInTheOccurrence, localeId);
                    defaultValueInTheOccurrenceByFlattenedKey = flattenKey(key, defaultValueInTheOccurrence);
                    flattenedKeysThatMustBePresent = _.union(Object.keys(defaultValueInTheOccurrenceByFlattenedKey), flattenedKeysThatMustBePresent);
                }

                var keyNeedsTranslation = false;
                flattenedKeysThatMustBePresent.forEach(function (flattenedKey) {
                    if (alreadyTranslatedByFlattenedKey[flattenedKey] && !commandLineOptions.all) {
                        return;
                    }
                    var value = valueByFlattenedKey[flattenedKey];
                    if (typeof value === 'undefined' && defaultValueInTheOccurrenceByFlattenedKey && isDefaultLocale) {
                        value = defaultValueInTheOccurrenceByFlattenedKey[flattenedKey];
                    }
                    babelSrc += flattenedKey + '=' + (omitExistingValues ? '' : String(value || '').replace(/\\/g, '\\\\').replace(/\n/g, '\\n')) + '\n';
                    keyNeedsTranslation = true;
                });

                if (keyNeedsTranslation && isDefaultLocale && relevantPluralFormsNotInTheDefaultLocale.length > 0 && valueContainsPlurals(value)) {
                    var localeIdsByFlattenedKey = {};
                    relevantPluralFormsNotInTheDefaultLocale.forEach(function (pluralForm) {
                        localeIds.forEach(function (localeId) {
                            if (pluralsCldr.forms(localeId).indexOf(pluralForm) !== -1) {
                                var valueByFlattenedKey = flattenKey(key, nullOutLeaves(coalescePluralsToLocale(defaultValueInTheOccurrence, localeId, pluralForm))),
                                    existingTranslationByFlattenedKey = allKeys[key] && localeId in allKeys[key] ? flattenKey(key, allKeys[key][localeId]) : {};

                                Object.keys(valueByFlattenedKey).forEach(function (flattenedKey) {
                                    if (!(flattenedKey in existingTranslationByFlattenedKey)) {
                                        (localeIdsByFlattenedKey[flattenedKey] = localeIdsByFlattenedKey[flattenedKey] || []).push(localeId);
                                    }
                                });
                            }
                        });
                    });
                    var flattenedKeysByJoinedLocaleIds = {};
                    Object.keys(localeIdsByFlattenedKey).forEach(function (flattenedKey) {
                        var localeIds = localeIdsByFlattenedKey[flattenedKey];
                        localeIds.sort();
                        (flattenedKeysByJoinedLocaleIds[localeIds.join(',')] = flattenedKeysByJoinedLocaleIds[localeIds.join(',')] || []).push(flattenedKey);
                    });

                    Object.keys(flattenedKeysByJoinedLocaleIds).forEach(function (joinedLocaleIds) {
                        var flattenedKeys = flattenedKeysByJoinedLocaleIds[joinedLocaleIds],
                            localeIds = joinedLocaleIds.split(',');
                        babelSrc += '# NOTE: The language' + (localeIds.length > 1 ? 's ' : ' ') + localeIds.join(', ') + (localeIds.length > 1 ? ' need' : ' needs') + (flattenedKeys.length > 1 ? ' these additional keys' : ' this additional key') + ' to cover all plural forms:\n' +
                            flattenedKeys.map(function (flattenedKey) {
                                return '# ' + flattenedKey + '=\n';
                            }).join('');
                    });
                }

                var i18nAssetForKey = assetGraph.findAssets({type: 'I18n', isLoaded: true, parseTree: function (parseTree) {
                    return key in parseTree;
                }})[0] || i18nAsset;

                if (i18nAssetForKey) {
                    if (!(key in i18nAssetForKey.parseTree)) {
                        i18nAssetForKey.parseTree[key] = {};
                        i18nAssetForKey.markDirty();
                    }
                    i18nAssetForKey.parseTree[key] = i18nAssetForKey.parseTree[key] || {};
                    if (!(localeId in i18nAssetForKey.parseTree[key])) {
                        if (localeId.indexOf(defaultLocaleId) === 0) {
                            i18nAssetForKey.parseTree[key][localeId] = defaultValue;
                        } else {
                            var newValue;
                            if (omitExistingValues) {
                                newValue = nullOutLeaves(coalescePluralsToLocale(value, localeId));
                            } else {
                                newValue = getLeavesFrom(coalescePluralsToLocale(defaultValue, localeId), value);
                            }
                            i18nAssetForKey.parseTree[key][localeId] = newValue;
                        }
                        i18nAssetForKey.markDirty();
                    }
                }
            });
            var targetBabelFileName = path.resolve(commandLineOptions.babeldir, localeId + '.txt');
            if (babelSrc.length) {
                console.warn('Writing ' + targetBabelFileName);
                fs.writeFileSync(targetBabelFileName, babelSrc, 'utf-8');
            } else {
                console.warn('No existing keys for ' + localeId + ', not writing ' + targetBabelFileName);
            }
        });
    })
    .prettyPrintAssets({type: 'I18n', isDirty: true})
    .writeAssetsToDisc({type: 'I18n', isDirty: true})
    .run();
